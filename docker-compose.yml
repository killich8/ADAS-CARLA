version: '3.8'

services:
  # CARLA Simulator - synthetic data generation
  carla-simulator:
    image: carlasim/carla:0.9.15
    container_name: adas-carla-server
    ports:
      - "2000:2000"
      - "2001:2001"  
    environment:
      - DISPLAY=${DISPLAY:-:0}
      - SDL_VIDEODRIVER=offscreen  
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw  
      - carla-data:/home/carla/Data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - adas-network
    healthcheck:
      test: ["CMD", "python3", "-c", "import carla; c=carla.Client('localhost', 2000); c.get_server_version()"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL for metadata and MLflow backend
  postgres:
    image: postgres:15-alpine
    container_name: adas-postgres
    environment:
      POSTGRES_USER: adas_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-adas_pass}
      POSTGRES_DB: adas_carla
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - adas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adas_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: adas-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - adas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO for S3-compatible local storage
  minio:
    image: minio/minio:latest
    container_name: adas-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-minioadmin}
      MINIO_DEFAULT_BUCKETS: "adas-raw,adas-processed,adas-models"
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio-data:/data
    networks:
      - adas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MLflow for experiment tracking
  mlflow:
    build:
      context: .
      dockerfile: docker/mlflow/Dockerfile
    container_name: adas-mlflow
    ports:
      - "5000:5000"
    environment:
      BACKEND_STORE_URI: postgresql://adas_user:${DB_PASSWORD:-adas_pass}@postgres:5432/adas_forge
      DEFAULT_ARTIFACT_ROOT: s3://adas-models/
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PASSWORD:-minioadmin}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - adas-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: adas-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - adas-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: adas-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,redis-datasource
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /var/lib/grafana/dashboards/main.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - adas-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Elasticsearch for logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: adas-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - adas-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: adas-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - adas-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Airflow for workflow orchestration
  airflow:
    image: apache/airflow:2.7.0
    container_name: adas-airflow
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://adas_user:${DB_PASSWORD:-adas_pass}@postgres:5432/adas_forge
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW_UID: 1000
    volumes:
      - ./pipelines/airflow/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    networks:
      - adas-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "airflow db init &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
               airflow webserver"
    restart: unless-stopped

  # Jupyter for experimentation
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: adas-jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: ${JUPYTER_TOKEN:-adas-forge}
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
    networks:
      - adas-network
    command: start-notebook.sh --NotebookApp.token=${JUPYTER_TOKEN:-adas-forge}

  # RabbitMQ for task queue (alternative to Redis for some workloads)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: adas-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - adas-network

  # Data processor service
  data-processor:
    build:
      context: .
      dockerfile: docker/processor/Dockerfile
    container_name: adas-processor
    environment:
      CARLA_HOST: carla-simulator
      CARLA_PORT: 2000
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_HOST: redis
      MINIO_ENDPOINT: minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_PASSWORD:-minioadmin}
    volumes:
      - ./src:/app/src
      - ./configs:/app/configs
      - ./data:/app/data
    networks:
      - adas-network
    depends_on:
      - carla-simulator
      - postgres
      - redis
      - minio
    restart: unless-stopped

networks:
  adas-network:
    driver: bridge
    name: adas-network

volumes:
  carla-data:
  postgres-data:
  redis-data:
  minio-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  airflow-logs:
  rabbitmq-data: