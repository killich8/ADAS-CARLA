#!/bin/bash

# Script to create S3 backend for Terraform state


set -e

# Configuration
PROJECT_NAME="adas-carla"
AWS_REGION="${AWS_REGION:-eu-west-1}"
ENVIRONMENT="${1:-dev}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}Setting up Terraform backend for ADAS-CARLA${NC}"
echo "Environment: $ENVIRONMENT"
echo "Region: $AWS_REGION"
echo ""

# Get AWS account ID
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
if [ -z "$AWS_ACCOUNT_ID" ]; then
    echo -e "${RED}Error: Could not get AWS account ID. Please configure AWS CLI.${NC}"
    exit 1
fi

echo "AWS Account: $AWS_ACCOUNT_ID"

# S3 bucket name (must be globally unique)
S3_BUCKET_NAME="${PROJECT_NAME}-terraform-state-${AWS_ACCOUNT_ID}"
DYNAMODB_TABLE_NAME="${PROJECT_NAME}-terraform-locks"
KMS_KEY_ALIAS="alias/terraform-state"

# Check if S3 bucket exists
echo -n "Checking if S3 bucket exists... "
if aws s3api head-bucket --bucket "$S3_BUCKET_NAME" 2>/dev/null; then
    echo -e "${YELLOW}Bucket already exists${NC}"
else
    echo "Creating bucket..."
    
    # Create S3 bucket
    if [ "$AWS_REGION" = "us-east-1" ]; then
        aws s3api create-bucket \
            --bucket "$S3_BUCKET_NAME" \
            --region "$AWS_REGION"
    else
        aws s3api create-bucket \
            --bucket "$S3_BUCKET_NAME" \
            --region "$AWS_REGION" \
            --create-bucket-configuration LocationConstraint="$AWS_REGION"
    fi
    
    # Enable versioning
    aws s3api put-bucket-versioning \
        --bucket "$S3_BUCKET_NAME" \
        --versioning-configuration Status=Enabled
    
    # Enable encryption
    aws s3api put-bucket-encryption \
        --bucket "$S3_BUCKET_NAME" \
        --server-side-encryption-configuration '{
            "Rules": [{
                "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "aws:kms"
                }
            }]
        }'
    
    # Block public access
    aws s3api put-public-access-block \
        --bucket "$S3_BUCKET_NAME" \
        --public-access-block-configuration \
            BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
    
    # Add lifecycle policy for old versions
    aws s3api put-bucket-lifecycle-configuration \
    --bucket "$S3_BUCKET_NAME" \
    --lifecycle-configuration '{
        "Rules": [
        {
            "ID": "cleanup-old-tfstate-versions",
            "Status": "Enabled",
            "Filter": { "Prefix": "" },
            "NoncurrentVersionExpiration": { "NoncurrentDays": 90 },
            "AbortIncompleteMultipartUpload": { "DaysAfterInitiation": 7 }
        }
        ]
    }'
    
    echo -e "${GREEN} S3 bucket created${NC}"
fi

# Check if DynamoDB table exists
echo -n "Checking if DynamoDB table exists... "
if aws dynamodb describe-table --table-name "$DYNAMODB_TABLE_NAME" --region "$AWS_REGION" 2>/dev/null > /dev/null; then
    echo -e "${YELLOW}Table already exists${NC}"
else
    echo "Creating table..."
    
    # Create DynamoDB table for state locking
    aws dynamodb create-table \
        --table-name "$DYNAMODB_TABLE_NAME" \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
        --region "$AWS_REGION" \
        --tags "Key=Project,Value=$PROJECT_NAME" "Key=Environment,Value=$ENVIRONMENT" "Key=ManagedBy,Value=Terraform"
    
    # Wait for table to be active
    echo -n "Waiting for table to be active..."
    aws dynamodb wait table-exists --table-name "$DYNAMODB_TABLE_NAME" --region "$AWS_REGION"
    echo -e "${GREEN} DynamoDB table created${NC}"
fi

# Create backend configuration file
BACKEND_CONFIG_FILE="backend-${ENVIRONMENT}.hcl"
cat > "$BACKEND_CONFIG_FILE" << EOF
# Terraform backend configuration for $ENVIRONMENT
# Generated by setup-backend.sh on $(date)

bucket         = "$S3_BUCKET_NAME"
key            = "environments/$ENVIRONMENT/terraform.tfstate"
region         = "$AWS_REGION"
dynamodb_table = "$DYNAMODB_TABLE_NAME"
encrypt        = true
EOF

echo -e "${GREEN} Backend configuration written to $BACKEND_CONFIG_FILE${NC}"

# Create a sample terraform init command
echo ""
echo -e "${GREEN}Backend setup complete!${NC}"
echo ""
echo "To initialize Terraform with this backend, run:"
echo -e "${YELLOW}terraform init -backend-config=$BACKEND_CONFIG_FILE${NC}"
echo ""
echo "Backend details:"
echo "  S3 Bucket: $S3_BUCKET_NAME"
echo "  DynamoDB Table: $DYNAMODB_TABLE_NAME"
echo "  Region: $AWS_REGION"